#!groovy
import groovy.json.JsonSlurperClassic
node {

    def BUILD_NUMBER=env.BUILD_NUMBER
    def RUN_ARTIFACT_DIR="tests/${BUILD_NUMBER}"
    def SFDC_USERNAME

    def HUB_ORG=env.HUB_ORG_DH
    def SFDC_HOST = env.SFDC_HOST_DH
    def JWT_KEY_CRED_ID = env.JWT_CRED_ID_DH
    def CONNECTED_APP_CONSUMER_KEY=env.CONNECTED_APP_CONSUMER_KEY_DH




    stage('checkout source') {
        // when running in multi-branch job, one must issue this command
        checkout scm
    }

    withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
        stage('Auth Org') {
            rc = command "${sfdx} force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --setalias UserTest --jwtkeyfile \"${jwt_key_file}\" --instanceurl ${SFDC_HOST}"
		    if (rc != 0) {
			error 'Salesforce org authorization failed.'
		    }
			println rc
        }

        stage('Deploye Code') {

			// need to pull out assigned username
			   rmsg = command "${sfdx} force:mdapi:deploy -d manifest/. --targetusername UserTest"
			  
            printf rmsg
            println('Hello from a Job DSL script! ok')
            println(rmsg)
        }

        stage('Export Code'){

            emsg = command"${sfdx} force:data:tree:export --targetusername UserTest --query  \"SELECT fields(all) FROM Account\" --prefix export-demo --outputdir data-source --plan"
            printf emsg
            println('EXPORT TEST')
        }

    }
   
}

    def command(script) {
        if (isUnix()) {
            return sh(returnStatus: true, script: script);
        } else {
            return bat(returnStatus: true, script: script);
        }
    } 