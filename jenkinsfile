#!groovy
import groovy.json.JsonSlurperClassic
node {


    def SFDC_USERNAME = env.HUB_ORG_DH
    def TEST_LEVEL='RunLocalTests'
    def HUB_ORG=env.HUB_ORG_DH
    def SFDC_HOST = env.SFDC_HOST_DH
    def JWT_KEY_CRED_ID = env.JWT_CRED_ID_DH
    def CONNECTED_APP_CONSUMER_KEY=env.CONNECTED_APP_CONSUMER_KEY_DH


    //def toolbelt = tool 'toolbelt'

    stage('checkout source') {
        // when running in multi-branch job, one must issue this command
        checkout scm
    }

    withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
        stage('Auth Org') {
        rc = command "sfdx auth:jwt:grant --instanceurl ${SFDC_HOST} --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG_DH} --jwtkeyfile ${jwt_key_file} --setdefaultdevhubusername --setalias HubOrg"
                if (rc != 0) {
                    error 'Salesforce dev hub org authorization failed.'
                }
			println rc
        }

        stage('Deploye Code') {

			// need to pull out assigned username
			   rmsg = command "sfdx force:apex:test:run --targetusername HubOrg --resultformat human --codecoverage --testlevel ${TEST_LEVEL}"
			  
            printf rmsg
            println('Hello from a Job DSL script! ok')
            println(rmsg)
        }

        stage('Export Code'){

            emsg = command "sfdx force:data:tree:export --query  \"SELECT fields(all) FROM Account\" --prefix export-demo --outputdir data-source --plan --targetdevhubusername HubOrg"
            printf emsg
            println('EXPORT TEST')
        }

    }
   
}

    def command(script) {
        if (isUnix()) {
            return sh(returnStatus: true, script: script);
        } else {
            return bat(returnStatus: true, script: script);
        }
    } 